fn main() {
    let nan = 0.0_f32 / 0.0;
    let nan2 = -0.0_f32/0.0;
    println!("nan signaling: {:?}", nan.to_be_bytes());
    println!("nan2 signaling: {:?}", nan2.to_be_bytes());
    println!("nan + 0: {:?}", (nan + 0 as f32).to_be_bytes());
    println!("nan - 0: {:?}", (nan - 0 as f32).to_be_bytes());
    println!("nan * 0: {:?}", (nan * 0 as f32).to_be_bytes());
    println!("nan / 0: {:?}", (nan / 0 as f32).to_be_bytes());
    println!("nan + nan: {:?}", (nan + nan2).to_be_bytes());
    println!("nan - nan: {:?}", (nan - nan2).to_be_bytes());
    println!("nan * nan: {:?}", (nan * nan2).to_be_bytes());
    println!("nan / nan: {:?}", (nan / nan2).to_be_bytes());
    println!("nan + 2.0: {:?}", (nan + 2 as f32).to_be_bytes());
    println!("nan - 2: {:?}", (nan - 2 as f32).to_be_bytes());
    println!("nan * 2: {:?}", (nan * 2 as f32).to_be_bytes());
    println!("nan / 2: {:?}", (nan / 2 as f32).to_be_bytes());
    println!("change in byte");
    let mut nanb = nan.to_be_bytes();
    let mut nanb2=nan2.to_be_bytes();
    nanb[3] = 1 as u8;
    nanb2[3] = 255 as u8;
    println!("change last byte: {:?}", nanb);
    println!("change last byte into 255: {:?}", nanb);
    let nan3 = f32::from_be_bytes(nanb2);
    println!("nan: {}", f32::NAN != f32::NAN);
    println!("nan quiet: {:?}", -nan3);
    println!("nan3 + 0: {:?}", (nan3 + 0 as f32).to_be_bytes());
    println!("nan3 - 0: {:?}", (nan3 - 0 as f32).to_be_bytes());
    println!("nan3 * 0: {:?}", (nan3 * 0 as f32).to_be_bytes());
    println!("nan3 / 0: {:?}", (nan3 / 0 as f32).to_be_bytes());
    println!("nan3 + nan3: {:?}", (nan3 + nan3).to_be_bytes());
    println!("nan3 - nan3: {:?}", (nan3 - nan3).to_be_bytes());
    println!("nan3 * nan3: {:?}", (nan3 * nan3).to_be_bytes());
    println!("nan3 / nan3: {:?}", (nan3 / nan3).to_be_bytes());
    println!("NAn / nan: {:?}", (f32::NAN / f32::NAN));
    println!("Nan f64 as f32: {:?}", (f64::NAN as f32).to_be_bytes());
    println!("Nan f64 : {:?}", (f64::NAN).to_be_bytes());
    println!("Nan f32 as f64: {:?}", (f32::NAN as f64).to_be_bytes());
    println!("Nan / Nan: {:?}", (0.0f32 / f64::NAN as f32));
    println!("nan3 + 2.0: {:?}", (nan3 + 2 as f32).to_be_bytes());
    println!("nan3 - 2: {:?}", (nan3 - 2 as f32).to_be_bytes());
    println!("nan3 * 2: {:?}", (nan3 * 2 as f32).to_be_bytes());
    println!("nan3 / 2: {:?}", (nan3 / 2 as f32).to_be_bytes());
    println!("frac: {}", 0.1 as f32);
    println!("frac: {}", 0.2 as f32);
    println!("frac: {}", 0.3 as f32);
    println!("frac: {}", 0.4 as f32);
    println!("frac: {}", 0.5 as f32);
    println!("frac: {}", 0.6 as f32);
    println!("frac: {}", 0.7 as f32);
    println!("frac: {}", 0.8 as f32);
    println!("frac: {}", 0.9 as f32);

}